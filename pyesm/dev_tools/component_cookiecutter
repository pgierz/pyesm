#!/usr/bin/env python
"""
Provides a quickstart to make your own component
"""

import argparse
import json
import subprocess

from cookiecutter_basics import parse_args_component, initialize_git_repo

def make_init_py(name, version, comptype):
    file_template = '''"""
%(name)s Component

A %(comptype)s Model, Version: %(version)s

Please write some more documentation.

Written by component_cookiecutter

----
"""

import logging
import os

from component import Component


class %(class_name)s(Component):
    """ A docstring for your component """
    DOWNLOAD_ADDRESS = "http://some/address/of/a/project"
    NAME = "%(name)s"
    VERSION = "%(version)s"
    TYPE = "%(comptype)s"

    def _resolution(self, res_key=None):
        """
        Defines the resolution and generates the following attributes
        """
        Resolutions = {None:
                        {"LateralResolution": None,
                        "VerticalResolution": None,
                        "Timestep": None,
                        "_nx": None,
                        "_ny": None,
                        "_nz": None,
                        "_ngridpoints": None,
                        }
                      }
        for key, value in Resolutions[res_key].items():
            setattr(self, key, value)
''' % {"name": name, "version": version, "comptype": comptype, 
       "class_name": "".join([name_part.capitalize() for name_part in name.split("_")])}
    with open(name+"/__init__.py", "w") as initfile:
        initfile.write(file_template)

def make_Compute_py(name):
    file_template = '''"""
Compute and Post-Processing Jobs for %(name)s

Written by component_cookiecutter

----
"""

from component.component_simulation import ComponentCompute
from %(name)s import %(class_name)s

class %(class_name)sCompute(%(class_name)s, ComponentCompute):
    """ A docstring. Please fill this out at least a little bit """

    def _compute_requirements(self):
        """ Compute requirements for %(name)s """
        self.executeable = None
        self.command = None
        self.num_tasks = None
        self.num_threads = None

''' % {"name": name, "Name": name.capitalize(), "class_name": "".join([name_part.capitalize() for name_part in name.split("_")])}
    with open(name+"/"+name+"_simulation.py", "w") as compute_file:
        compute_file.write(file_template)

def make_JSON_files(name, version):
    example_filetable_in = {"input": 
                                {"first_input": {"src": "/path/to/input/file", "dest": "/path/to/destination/of/input/file", "copy_method": "copy"},
                                 "second_input": {"src": "/path/to/input/file", "dest": "/path/to/destination/of/input/file", "copy_method": "copy"},
                                 "third_input": {"src": "/path/to/input/file", "dest": "/path/to/destination/of/input/file", "copy_method": "copy"}
                                 },
                            "config": 
                                {"first_config": {"src": "/path/to/config/file", "dest": "/path/to/destination/of/config/file", "copy_method": "copy"},
                                 "second_config": {"src": "/path/to/config/file", "dest": "/path/to/destination/of/config/file", "copy_method": "copy"},
                                 "third_config": {"src": "/path/to/config/file", "dest": "/path/to/destination/of/config/file", "copy_method": "copy"}
                                 },
                            "forcing": 
                                {"first_forcing": {"src": "/path/to/forcing/file", "dest": "/path/to/destination/of/forcing/file", "copy_method": "copy"},
                                 "second_forcing": {"src": "/path/to/forcing/file", "dest": "/path/to/destination/of/forcing/file", "copy_method": "copy"},
                                 "third_forcing": {"src": "/path/to/forcing/file", "dest": "/path/to/destination/of/forcing/file", "copy_method": "copy"}
                                 },
                            "restart": 
                                {"first_restart": {"src": "/path/to/restart/file", "dest": "/path/to/destination/of/restart/file", "copy_method": "copy"},
                                 "second_restart": {"src": "/path/to/restart/file", "dest": "/path/to/destination/of/restart/file", "copy_method": "copy"},
                                 "third_restart": {"src": "/path/to/restart/file", "dest": "/path/to/destination/of/restart/file", "copy_method": "copy"}
                                 }
                            }
    for tag in ["prepare_default", "prepare_modify"]:
        with open(name+"/"+"_".join([name, version, tag, "files.json"]), "w") as f:
            json.dump(example_filetable_in, f, indent=2, sort_keys=True)

    example_filetable_out = {"outdata":
                                {"first_output": {"src": "name_of_output_file", "dest": "@EXPID@_@NAME@_name_of_output_file_@DATE@.nc"}},
                            "restart":
                                {"first_restart": {"src": "name_of_restart", "dest": "@EXPID@_@NAME_restart1_@DATE@.nc"}}
                            }
    with open(name+"/"+"_".join([name, version, "cleanup_default_files.json"]), "w") as f:
            json.dump(example_filetable_out, f, indent=2, sort_keys=True)

def main():
    args = parse_args_component()
    initialize_git_repo(args.NAME)
    make_init_py(args.NAME, args.VERSION, args.TYPE)
    make_Compute_py(args.NAME)
    make_JSON_files(args.NAME, args.VERSION) 

if __name__ == "__main__":
    main()
